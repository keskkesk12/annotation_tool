#include "matmul.hpp"
#include <chrono>
#include <iostream>
#include "bram_uio.hpp"
#include "xnn_inference.h"
typedef std::chrono::milliseconds ms;
NN_data img[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.196078, 0.670588, 0.670588, 0.670588, 0.784314, 0.784314, 0.780392, 0.784314, 0.784314, 0.788235, 0.788235, 0.788235, 0.792157, 0.796078, 0.788235, 0.792157, 0.784314, 0.788235, 0.780392, 0.780392, 0.780392, 0.756863, 0.427451, 0.403922, 0.290196, 0.364706, 0.25098, 0.309804, 0.498039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0117647, 0.439216, 0.458824, 0.462745, 0.756863, 0.815686, 0.815686, 0.807843, 0.807843, 0.788235, 0.8, 0.792157, 0.792157, 0.792157, 0.788235, 0.784314, 0.788235, 0.784314, 0.788235, 0.788235, 0.788235, 0.788235, 0.788235, 0.792157, 0.788235, 0.792157, 0.788235, 0.784314, 0.784314, 0.784314, 0.780392, 0.768627, 0.756863, 0.427451, 0.380392, 0.27451, 0.247059, 0.337255, 0.713726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.843137, 0.847059, 0.854902, 0.843137, 0.843137, 0.839216, 0.839216, 0.839216, 0.819608, 0.823529, 0.815686, 0.807843, 0.803922, 0.8, 0.796078, 0.796078, 0.792157, 0.784314, 0.784314, 0.788235, 0.780392, 0.784314, 0.784314, 0.788235, 0.784314, 0.784314, 0.780392, 0.776471, 0.784314, 0.792157, 0.784314, 0.788235, 0.788235, 0.784314, 0.780392, 0.780392, 0.776471, 0.760784, 0.701961, 0.368627, 0.329412, 0.286275, 0.305882, 0.709804, 0.0196078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.839216, 0.847059, 0.843137, 0.839216, 0.847059, 0.839216, 0.831373, 0.815686, 0.827451, 0.819608, 0.811765, 0.811765, 0.8, 0.807843, 0.8, 0.784314, 0.784314, 0.784314, 0.780392, 0.776471, 0.780392, 0.780392, 0.780392, 0.788235, 0.788235, 0.780392, 0.784314, 0.784314, 0.780392, 0.776471, 0.780392, 0.780392, 0.780392, 0.772549, 0.772549, 0.784314, 0.776471, 0.752941, 0.733333, 0.388235, 0.294118, 0.25098, 0.329412, 0.729412, 0.576471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.827451, 0.839216, 0.839216, 0.839216, 0.835294, 0.827451, 0.815686, 0.827451, 0.811765, 0.811765, 0.807843, 0.807843, 0.803922, 0.796078, 0.796078, 0.780392, 0.784314, 0.780392, 0.784314, 0.772549, 0.776471, 0.764706, 0.776471, 0.772549, 0.776471, 0.776471, 0.776471, 0.784314, 0.776471, 0.776471, 0.768627, 0.776471, 0.772549, 0.772549, 0.776471, 0.776471, 0.768627, 0.756863, 0.74902, 0.462745, 0.411765, 0.32549, 0.376471, 0.564706, 0.678431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.819608, 0.823529, 0.827451, 0.831373, 0.819608, 0.819608, 0.819608, 0.811765, 0.811765, 0.807843, 0.807843, 0.8, 0.8, 0.792157, 0.784314, 0.780392, 0.780392, 0.772549, 0.772549, 0.776471, 0.607843, 0.435294, 0.505882, 0.764706, 0.662745, 0.768627, 0.772549, 0.772549, 0.772549, 0.764706, 0.768627, 0.768627, 0.772549, 0.772549, 0.772549, 0.772549, 0.768627, 0.760784, 0.729412, 0.494118, 0.407843, 0.341176, 0.45098, 0.890196, 0.737255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.819608, 0.811765, 0.811765, 0.819608, 0.815686, 0.807843, 0.807843, 0.803922, 0.807843, 0.8, 0.8, 0.803922, 0.796078, 0.788235, 0.784314, 0.780392, 0.772549, 0.780392, 0.776471, 0.780392, 0.360784, 0.407843, 0.419608, 0.752941, 0.690196, 0.768627, 0.768627, 0.772549, 0.756863, 0.768627, 0.768627, 0.768627, 0.760784, 0.764706, 0.768627, 0.768627, 0.756863, 0.701961, 0.792157, 0.784314, 0.729412, 0.8, 0.909804, 0.894118, 0.901961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.811765, 0.811765, 0.803922, 0.815686, 0.807843, 0.807843, 0.803922, 0.803922, 0.796078, 0.796078, 0.8, 0.792157, 0.784314, 0.788235, 0.784314, 0.780392, 0.768627, 0.768627, 0.776471, 0.768627, 0.772549, 0.458824, 0.494118, 0.545098, 0.654902, 0.756863, 0.764706, 0.768627, 0.764706, 0.756863, 0.764706, 0.756863, 0.768627, 0.756863, 0.862745, 0.784314, 0.717647, 0.733333, 0.741176, 0.74902, 0.713726, 0.831373, 0.85098, 0.870588, 0.894118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.803922, 0.803922, 0.807843, 0.803922, 0.803922, 0.803922, 0.796078, 0.796078, 0.796078, 0.792157, 0.788235, 0.780392, 0.784314, 0.776471, 0.772549, 0.772549, 0.772549, 0.764706, 0.764706, 0.764706, 0.760784, 0.756863, 0.482353, 0.388235, 0.686275, 0.752941, 0.760784, 0.752941, 0.752941, 0.756863, 0.752941, 0.752941, 0.768627, 0.847059, 0.784314, 0.772549, 0.752941, 0.717647, 0.713726, 0.709804, 0.803922, 0.898039, 0.878431, 0.878431, 0.839216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8, 0.796078, 0.8, 0.796078, 0.8, 0.788235, 0.780392, 0.792157, 0.788235, 0.788235, 0.784314, 0.784314, 0.776471, 0.768627, 0.772549, 0.776471, 0.764706, 0.756863, 0.760784, 0.756863, 0.756863, 0.752941, 0.690196, 0.392157, 0.568627, 0.737255, 0.741176, 0.745098, 0.74902, 0.745098, 0.745098, 0.74902, 0.878431, 0.729412, 0.729412, 0.741176, 0.72549, 0.741176, 0.768627, 0.819608, 0.913725, 0.878431, 0.847059, 0.866667, 0.823529, 0.0862745, 0, 0, 0, 0, 0, 0, 0, 0, 0.796078, 0.788235, 0.784314, 0.784314, 0.784314, 0.784314, 0.784314, 0.780392, 0.780392, 0.768627, 0.768627, 0.772549, 0.776471, 0.768627, 0.764706, 0.768627, 0.752941, 0.760784, 0.752941, 0.756863, 0.74902, 0.74902, 0.74902, 0.705882, 0.545098, 0.615686, 0.733333, 0.741176, 0.737255, 0.729412, 0.729412, 0.929412, 0.819608, 0.643137, 0.52549, 0.733333, 0.721569, 0.721569, 0.737255, 0.709804, 0.705882, 0.713726, 0.694118, 0.690196, 0.717647, 0.113725, 0, 0, 0, 0, 0, 0, 0, 0, 0.784314, 0.776471, 0.776471, 0.784314, 0.780392, 0.780392, 0.776471, 0.772549, 0.768627, 0.772549, 0.780392, 0.768627, 0.764706, 0.760784, 0.764706, 0.764706, 0.756863, 0.756863, 0.74902, 0.74902, 0.74902, 0.745098, 0.74902, 0.737255, 0.505882, 0.556863, 0.635294, 0.670588, 0.713726, 0.709804, 0.666667, 0.521569, 0.741176, 0.54902, 0.462745, 0.690196, 0.729412, 0.717647, 0.713726, 0.701961, 0.701961, 0.686275, 0.678431, 0.639216, 0.65098, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0.764706, 0.776471, 0.776471, 0.784314, 0.772549, 0.768627, 0.772549, 0.768627, 0.760784, 0.764706, 0.764706, 0.764706, 0.752941, 0.752941, 0.752941, 0.752941, 0.752941, 0.74902, 0.737255, 0.745098, 0.741176, 0.741176, 0.733333, 0.729412, 0.72549, 0.478431, 0.482353, 0.611765, 0.607843, 0.603922, 0.443137, 0.352941, 0.313726, 0.47451, 0.470588, 0.6, 0.752941, 0.741176, 0.713726, 0.733333, 0.690196, 0.666667, 0.627451, 0.658824, 0.627451, 0.254902, 0, 0, 0, 0, 0, 0, 0, 0, 0.764706, 0.760784, 0.756863, 0.768627, 0.764706, 0.760784, 0.756863, 0.760784, 0.752941, 0.752941, 0.74902, 0.756863, 0.756863, 0.74902, 0.74902, 0.745098, 0.74902, 0.745098, 0.729412, 0.729412, 0.729412, 0.733333, 0.72549, 0.721569, 0.713726, 0.698039, 0.356863, 0.376471, 0.482353, 0.505882, 0.364706, 0.313726, 0.32549, 0.67451, 0.682353, 0.690196, 0.741176, 0.788235, 0.74902, 0.717647, 0.764706, 0.737255, 0.701961, 0.647059, 0.623529, 0.670588, 0, 0, 0, 0, 0, 0, 0, 0, 0.760784, 0.752941, 0.752941, 0.764706, 0.756863, 0.752941, 0.752941, 0.752941, 0.745098, 0.74902, 0.752941, 0.752941, 0.74902, 0.741176, 0.741176, 0.741176, 0.737255, 0.729412, 0.713726, 0.713726, 0.721569, 0.721569, 0.72549, 0.709804, 0.701961, 0.694118, 0.678431, 0.4, 0.301961, 0.294118, 0.533333, 0.658824, 0.65098, 0.666667, 0.67451, 0.67451, 0.72549, 0.847059, 0.854902, 0.776471, 0.745098, 0.784314, 0.8, 0.760784, 0.654902, 0.631373, 0, 0, 0, 0, 0, 0, 0, 0, 0.752941, 0.74902, 0.741176, 0.745098, 0.752941, 0.745098, 0.745098, 0.74902, 0.745098, 0.74902, 0.745098, 0.741176, 0.741176, 0.737255, 0.729412, 0.733333, 0.733333, 0.721569, 0.709804, 0.701961, 0.705882, 0.713726, 0.701961, 0.698039, 0.690196, 0.678431, 0.666667, 0.658824, 0.662745, 0.666667, 0.662745, 0.658824, 0.654902, 0.654902, 0.662745, 0.666667, 0.737255, 0.733333, 0.898039, 0.905882, 0.831373, 0.788235, 0.768627, 0.662745, 0.6, 0.509804, 0, 0, 0, 0, 0, 0, 0, 0, 0.745098, 0.737255, 0.733333, 0.745098, 0.745098, 0.737255, 0.737255, 0.737255, 0.741176, 0.737255, 0.737255, 0.737255, 0.737255, 0.729412, 0.721569, 0.729412, 0.717647, 0.709804, 0.701961, 0.686275, 0.694118, 0.694118, 0.694118, 0.694118, 0.678431, 0.67451, 0.678431, 0.67451, 0.65098, 0.643137, 0.647059, 0.654902, 0.643137, 0.647059, 0.643137, 0.643137, 0.756863, 0.74902, 0.737255, 0.729412, 0.92549, 0.823529, 0.756863, 0.807843, 0.690196, 0.576471, 0, 0, 0, 0, 0, 0, 0, 0, 0.733333, 0.733333, 0.737255, 0.72549, 0.737255, 0.733333, 0.721569, 0.733333, 0.737255, 0.733333, 0.729412, 0.733333, 0.717647, 0.705882, 0.705882, 0.701961, 0.705882, 0.709804, 0.705882, 0.698039, 0.690196, 0.678431, 0.682353, 0.690196, 0.67451, 0.67451, 0.67451, 0.65098, 0.635294, 0.631373, 0.627451, 0.631373, 0.635294, 0.635294, 0.627451, 0.607843, 0.741176, 0.760784, 0.756863, 0.764706, 0.768627, 0.796078, 0.827451, 0.764706, 0.690196, 0.603922, 0, 0, 0, 0, 0, 0, 0, 0, 0.713726, 0.713726, 0.737255, 0.72549, 0.717647, 0.709804, 0.709804, 0.713726, 0.705882, 0.701961, 0.705882, 0.705882, 0.709804, 0.705882, 0.705882, 0.701961, 0.694118, 0.701961, 0.698039, 0.701961, 0.686275, 0.678431, 0.67451, 0.67451, 0.678431, 0.670588, 0.65098, 0.647059, 0.631373, 0.623529, 0.615686, 0.607843, 0.611765, 0.603922, 0.6, 0.596078, 0.611765, 0.756863, 0.776471, 0.85098, 0.803922, 0.815686, 0.898039, 0.8, 0.733333, 0.564706, 0.0196078, 0, 0, 0, 0, 0, 0, 0, 0.705882, 0.698039, 0.705882, 0.701961, 0.709804, 0.709804, 0.709804, 0.705882, 0.701961, 0.698039, 0.705882, 0.701961, 0.705882, 0.705882, 0.701961, 0.690196, 0.690196, 0.690196, 0.694118, 0.678431, 0.670588, 0.658824, 0.647059, 0.658824, 0.65098, 0.639216, 0.635294, 0.635294, 0.623529, 0.619608, 0.6, 0.592157, 0.584314, 0.588235, 0.588235, 0.580392, 0.823529, 0.803922, 0.827451, 0.909804, 0.890196, 0.556863, 0.792157, 0.611765, 0.466667, 0.188235, 0.266667, 0, 0, 0, 0, 0, 0, 0, 0.698039, 0.698039, 0.701961, 0.701961, 0.705882, 0.705882, 0.701961, 0.701961, 0.701961, 0.694118, 0.698039, 0.701961, 0.701961, 0.701961, 0.701961, 0.701961, 0.686275, 0.682353, 0.678431, 0.67451, 0.670588, 0.654902, 0.65098, 0.639216, 0.643137, 0.631373, 0.631373, 0.627451, 0.627451, 0.627451, 0.603922, 0.588235, 0.564706, 0.580392, 0.572549, 0.607843, 0.709804, 0.882353, 0.898039, 0.298039, 0.145098, 0.160784, 0.168627, 0.196078, 0.560784, 0.576471, 0.223529, 0, 0, 0, 0, 0, 0, 0, 0.686275, 0.682353, 0.682353, 0.686275, 0.690196, 0.698039, 0.694118, 0.698039, 0.701961, 0.694118, 0.686275, 0.694118, 0.694118, 0.694118, 0.694118, 0.690196, 0.682353, 0.686275, 0.678431, 0.670588, 0.666667, 0.662745, 0.647059, 0.631373, 0.631373, 0.631373, 0.627451, 0.615686, 0.623529, 0.607843, 0.6, 0.588235, 0.568627, 0.580392, 0.588235, 0.564706, 0.298039, 0.262745, 0.254902, 0.184314, 0.164706, 0.152941, 0.360784, 0.635294, 0.572549, 0.439216, 0.160784, 0, 0, 0, 0, 0, 0, 0, 0.67451, 0.678431, 0.682353, 0.682353, 0.682353, 0.686275, 0.694118, 0.682353, 0.686275, 0.678431, 0.682353, 0.686275, 0.686275, 0.686275, 0.682353, 0.682353, 0.678431, 0.678431, 0.67451, 0.662745, 0.658824, 0.654902, 0.658824, 0.647059, 0.639216, 0.643137, 0.639216, 0.631373, 0.627451, 0.611765, 0.596078, 0.584314, 0.572549, 0.568627, 0.309804, 0.258824, 0.258824, 0.227451, 0.227451, 0.219608, 0.164706, 0.156863, 0.278431, 0.513726, 0.45098, 0.380392, 0.152941, 0, 0, 0, 0, 0, 0, 0, 0.658824, 0.666667, 0.670588, 0.67451, 0.670588, 0.682353, 0.670588, 0.670588, 0.678431, 0.682353, 0.670588, 0.67451, 0.670588, 0.670588, 0.670588, 0.67451, 0.670588, 0.666667, 0.670588, 0.666667, 0.658824, 0.654902, 0.654902, 0.643137, 0.643137, 0.639216, 0.639216, 0.631373, 0.623529, 0.6, 0.584314, 0.564706, 0.556863, 0.278431, 0.254902, 0.25098, 0.207843, 0.196078, 0.203922, 0.196078, 0.176471, 0.364706, 0.427451, 0.270588, 0.309804, 0.258824, 0.101961, 0, 0, 0, 0, 0, 0, 0, 0.647059, 0.65098, 0.65098, 0.654902, 0.654902, 0.65098, 0.658824, 0.654902, 0.658824, 0.662745, 0.662745, 0.662745, 0.670588, 0.662745, 0.662745, 0.666667, 0.662745, 0.654902, 0.658824, 0.654902, 0.647059, 0.647059, 0.654902, 0.635294, 0.639216, 0.635294, 0.631373, 0.623529, 0.607843, 0.584314, 0.576471, 0.552941, 0.266667, 0.262745, 0.247059, 0.227451, 0.207843, 0.188235, 0.168627, 0.160784, 0.14902, 0.188235, 0.207843, 0.243137, 0.196078, 0.109804, 0.0980392, 0, 0, 0, 0, 0, 0, 0, 0.635294, 0.639216, 0.643137, 0.639216, 0.643137, 0.647059, 0.643137, 0.639216, 0.643137, 0.647059, 0.647059, 0.65098, 0.65098, 0.654902, 0.654902, 0.654902, 0.65098, 0.65098, 0.654902, 0.643137, 0.639216, 0.639216, 0.639216, 0.635294, 0.627451, 0.631373, 0.623529, 0.603922, 0.592157, 0.576471, 0.556863, 0.388235, 0.266667, 0.25098, 0.227451, 0.2, 0.176471, 0.160784, 0.156863, 0.141176, 0.12549, 0.0901961, 0.109804, 0.109804, 0.0862745, 0.0862745, 0.0862745, 0, 0, 0, 0, 0, 0, 0, 0.619608, 0.627451, 0.639216, 0.627451, 0.635294, 0.635294, 0.635294, 0.627451, 0.635294, 0.635294, 0.639216, 0.639216, 0.643137, 0.639216, 0.65098, 0.643137, 0.639216, 0.643137, 0.643137, 0.635294, 0.643137, 0.631373, 0.631373, 0.611765, 0.627451, 0.623529, 0.603922, 0.6, 0.588235, 0.560784, 0.552941, 0.258824, 0.25098, 0.235294, 0.196078, 0.184314, 0.160784, 0.152941, 0.12549, 0.121569, 0.0980392, 0.0901961, 0.0901961, 0.0941176, 0.0901961, 0.101961, 0.0980392, 0, 0, 0, 0, 0, 0, 0, 0.552941, 0.568627, 0.580392, 0.596078, 0.611765, 0.603922, 0.619608, 0.607843, 0.627451, 0.631373, 0.627451, 0.627451, 0.627451, 0.627451, 0.631373, 0.635294, 0.635294, 0.635294, 0.635294, 0.631373, 0.631373, 0.627451, 0.627451, 0.611765, 0.607843, 0.603922, 0.603922, 0.592157, 0.576471, 0.564706, 0.337255, 0.215686, 0.203922, 0.192157, 0.172549, 0.152941, 0.14902, 0.12549, 0.117647, 0.0901961, 0.109804, 0.117647, 0.0509804, 0.0313726, 0.0313726, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0.517647, 0.52549, 0.541176, 0.568627, 0.584314, 0.6, 0.596078, 0.607843, 0.6, 0.603922, 0.611765, 0.603922, 0.623529, 0.627451, 0.627451, 0.631373, 0.627451, 0.627451, 0.627451, 0.627451, 0.615686, 0.619608, 0.615686, 0.603922, 0.603922, 0.596078, 0.592157, 0.588235, 0.564706, 0.54902, 0.219608, 0.196078, 0.145098, 0.0784314, 0.0823529, 0.0666667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.411765, 0.431373, 0.462745, 0.498039, 0.541176, 0.564706, 0.580392, 0.576471, 0.580392, 0.584314, 0.592157, 0.6, 0.6, 0.603922, 0.607843, 0.6, 0.619608, 0.611765, 0.615686, 0.615686, 0.607843, 0.6, 0.6, 0.509804, 0.501961, 0.505882, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void benchmark_cpu(uint count)
{
    uint xsum = 0;
    uint ysum = 0;
    auto start = std::chrono::system_clock::now();
    for (int i = 0; i < count; i++)
    {
        Point p = nn(img);
        xsum += p.x;
        ysum += p.y;
    }
    auto end = std::chrono::system_clock::now();
    auto diff = end - start;

    ms d = std::chrono::duration_cast<ms>(diff);
    std::cout << "CPU: " << d.count() / float(count) << std::endl;
    Point p = nn(img);
    std::cout << "CPU x: " << p.x << " y:" << p.y << std::endl;
}

void benchmark_FPGA(uint count)
{
    XNn_inference *InstancePtr = new XNn_inference;
    InstancePtr->Axi_cpu_BaseAddress = 0xa0020000;
    InstancePtr->IsReady = false;
    const char *InstanceName = "nn_inference";
    int status = XNn_inference_Initialize(InstancePtr, InstanceName);
    assert(status == XST_SUCCESS);
    BRAM bram_input(0, 0x1000);
    BRAM bram_output(1, 0x1000);
    uint xsum = 0;
    uint ysum = 0;
    while (!XNn_inference_IsReady(InstancePtr))
        ;
    auto start = std::chrono::system_clock::now();
    for (int i = 0; i < count; i++)
    {
        for (int i = 0; i < 1620; i++)
        {
            bram_input[i] = *((u32 *)&(img[i]));
        }

        // start network and wait for it to finish
        XNn_inference_Start(InstancePtr);
        while (!XNn_inference_IsIdle(InstancePtr))
        {
        };
        xsum += *(float *)&(bram_output[0]);
        ysum += *(float *)&(bram_output[1]);
    }
    auto end = std::chrono::system_clock::now();
    auto diff = end - start;

    ms d = std::chrono::duration_cast<ms>(diff);
    std::cout << "FPGA: " << d.count() / float(count) << std::endl;
    float x= *(float *)&(bram_output[0]);
    float y = *(float *)&(bram_output[1]);
    std::cout << "FPGA x: " << x << " y:" << y << std::endl;
}
int main()
{
    benchmark_cpu(10000);
    benchmark_FPGA(10000);
    return 0;
}